# Services
services:
  backend:
    container_name: backend
    build:
      context: ./src/backend/
    environment:
      DB_NAME: bdr
      DB_USER: bdr
      DB_SSL: false
      DB_PORT: 5432
    ports:
      - 7000:7000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./src/backend/
        target: /app
    networks:
      - bdr
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    # healthcheck:
    #   test: ["CMD-SHELL", "curl --fail http://localhost:8081/health || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    secrets:
      - db_password
  frontend:
    container_name: frontend
    build:
      context: ./src/frontend/
    develop:
      watch:
        - action: sync
          path: ./src/frontend/
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    ports:
      - 3000:3000
    # depends_on:
    #   backend:
    #     condition: service_healthy
    # healthcheck:
    #   test:
    #     - CMD-SHELL
    #     - curl --fail http://localhost:3030 || exit 1
    #   interval: 1m
    #   timeout: 5s
    #   retries: 30
    networks:
      - bdr
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  db:
    container_name: db
    image: postgres
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_ROOT_PASSWORD: ROOTPW
      POSTGRES_DATABASE: bdr
      POSTGRES_USER: bdr
      PGUSER: bdr
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_PORT: 5600
    secrets:
      - db_password
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./src/backend/database/db.sql:/docker-entrypoint-initdb.d/create_database.sql
    networks:
      - bdr
    ports:
      - "5432:5432"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

networks:
  bdr:
volumes:
  postgres-data:
secrets:
  db_password:
    file: ./credentials.txt
